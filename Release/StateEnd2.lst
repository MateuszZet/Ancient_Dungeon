                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.0 #9615 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module StateEnd2
                              6 	.optsdcc -mgbz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _SpriteManagerAdd
                             12 	.globl _SpriteManagerLoad
                             13 	.globl _InitScrollColor
                             14 	.globl _ZInitScrollTilesColor
                             15 	.globl _SetState
                             16 	.globl _collilision_tiles4
                             17 	.globl _bank_STATE_END2
                             18 	.globl _Start_STATE_END2
                             19 	.globl _Update_STATE_END2
                             20 ;--------------------------------------------------------
                             21 ; ram data
                             22 ;--------------------------------------------------------
                             23 	.area _DATA
   0000                      24 _bank_STATE_END2::
   0000                      25 	.ds 1
   0001                      26 _collilision_tiles4::
   0001                      27 	.ds 5
                             28 ;--------------------------------------------------------
                             29 ; absolute external ram data
                             30 ;--------------------------------------------------------
                             31 	.area _DABS (ABS)
                             32 ;--------------------------------------------------------
                             33 ; global & static initialisations
                             34 ;--------------------------------------------------------
                             35 	.area _HOME
                             36 	.area _GSINIT
                             37 	.area _GSFINAL
                             38 	.area _GSINIT
                             39 ;StateEnd2.c:3: UINT8 bank_STATE_END2 = 2;
   0000 21r00r00             40 	ld	hl,#_bank_STATE_END2
   0003 36 02                41 	ld	(hl),#0x02
                             42 ;StateEnd2.c:13: UINT8 collilision_tiles4[] = { 1,2,3,4,0 };
   0005 21r01r00             43 	ld	hl,#_collilision_tiles4
   0008 36 01                44 	ld	(hl),#0x01
   000A 21r02r00             45 	ld	hl,#(_collilision_tiles4 + 0x0001)
   000D 36 02                46 	ld	(hl),#0x02
   000F 21r03r00             47 	ld	hl,#(_collilision_tiles4 + 0x0002)
   0012 36 03                48 	ld	(hl),#0x03
   0014 21r04r00             49 	ld	hl,#(_collilision_tiles4 + 0x0003)
   0017 36 04                50 	ld	(hl),#0x04
   0019 21r05r00             51 	ld	hl,#(_collilision_tiles4 + 0x0004)
   001C 36 00                52 	ld	(hl),#0x00
                             53 ;--------------------------------------------------------
                             54 ; Home
                             55 ;--------------------------------------------------------
                             56 	.area _HOME
                             57 	.area _HOME
                             58 ;--------------------------------------------------------
                             59 ; code
                             60 ;--------------------------------------------------------
                             61 	.area _CODE_2
                             62 ;StateEnd2.c:15: void Start_STATE_END2() {
                             63 ;	---------------------------------
                             64 ; Function Start_STATE_END2
                             65 ; ---------------------------------
   0000                      66 _Start_STATE_END2::
                             67 ;StateEnd2.c:17: next_lvl =1;
   0000 21r00r00             68 	ld	hl,#_next_lvl
   0003 36 01                69 	ld	(hl),#0x01
   0005 23                   70 	inc	hl
   0006 36 00                71 	ld	(hl),#0x00
                             72 ;StateEnd2.c:18: NR52_REG = 0x80; //Enables sound, you should always setup this first
   0008 21 26 FF             73 	ld	hl,#0xff26
   000B 36 80                74 	ld	(hl),#0x80
                             75 ;StateEnd2.c:19: NR51_REG = 0xFF; //Enables all channels (left and right)
   000D 2E 25                76 	ld	l, #0x25
   000F 36 FF                77 	ld	(hl),#0xff
                             78 ;StateEnd2.c:20: NR50_REG = 0x77; //Max volume
   0011 2E 24                79 	ld	l, #0x24
   0013 36 77                80 	ld	(hl),#0x77
                             81 ;StateEnd2.c:22: SPRITES_8x16;
   0015 11 40 FF             82 	ld	de,#0xff40
   0018 1A                   83 	ld	a,(de)
   0019 4F                   84 	ld	c,a
   001A 06 00                85 	ld	b,#0x00
   001C 79                   86 	ld	a,c
   001D CB D7                87 	set	2, a
   001F 4F                   88 	ld	c,a
   0020 2E 40                89 	ld	l, #0x40
   0022 71                   90 	ld	(hl),c
                             91 ;StateEnd2.c:23: for(i = 0; i != n_sprite_types; ++ i) {
   0023 06 00                92 	ld	b,#0x00
   0025                      93 00107$:
   0025 21r00r00             94 	ld	hl,#_n_sprite_types
   0028 7E                   95 	ld	a,(hl)
   0029 90                   96 	sub	a, b
   002A 28 0B                97 	jr	Z,00101$
                             98 ;StateEnd2.c:24: SpriteManagerLoad(i);
   002C C5                   99 	push	bc
   002D C5                  100 	push	bc
   002E 33                  101 	inc	sp
   002F CDr00r00            102 	call	_SpriteManagerLoad
   0032 33                  103 	inc	sp
   0033 C1                  104 	pop	bc
                            105 ;StateEnd2.c:23: for(i = 0; i != n_sprite_types; ++ i) {
   0034 04                  106 	inc	b
   0035 18 EE               107 	jr	00107$
   0037                     108 00101$:
                            109 ;StateEnd2.c:26: SHOW_SPRITES;
   0037 11 40 FF            110 	ld	de,#0xff40
   003A 1A                  111 	ld	a,(de)
   003B 4F                  112 	ld	c,a
   003C 06 00               113 	ld	b,#0x00
   003E 79                  114 	ld	a,c
   003F CB CF               115 	set	1, a
   0041 4F                  116 	ld	c,a
   0042 21 40 FF            117 	ld	hl,#0xff40
   0045 71                  118 	ld	(hl),c
                            119 ;StateEnd2.c:28: scroll_target = SpriteManagerAdd(SPRITE_PLAYER, 70, 35);
   0046 21 23 00            120 	ld	hl,#0x0023
   0049 E5                  121 	push	hl
   004A 2E 46               122 	ld	l, #0x46
   004C E5                  123 	push	hl
   004D AF                  124 	xor	a, a
   004E F5                  125 	push	af
   004F 33                  126 	inc	sp
   0050 CDr00r00            127 	call	_SpriteManagerAdd
   0053 E8 05               128 	add	sp, #5
   0055 21r00r00            129 	ld	hl,#_scroll_target
   0058 73                  130 	ld	(hl),e
   0059 23                  131 	inc	hl
   005A 72                  132 	ld	(hl),d
                            133 ;StateEnd2.c:30: if(have_diamond==1){
   005B 21r00r00            134 	ld	hl,#_have_diamond
   005E 7E                  135 	ld	a,(hl)
   005F 3D                  136 	dec	a
   0060 20 25               137 	jr	NZ,00103$
   0062 23                  138 	inc	hl
   0063 7E                  139 	ld	a,(hl)
   0064 B7                  140 	or	a, a
   0065 20 20               141 	jr	NZ,00103$
                            142 ;StateEnd2.c:31: SpriteManagerAdd(SPRITE_DIAMOND, 80, 72);
   0067 21 48 00            143 	ld	hl,#0x0048
   006A E5                  144 	push	hl
   006B 2E 50               145 	ld	l, #0x50
   006D E5                  146 	push	hl
   006E 3E 09               147 	ld	a,#0x09
   0070 F5                  148 	push	af
   0071 33                  149 	inc	sp
   0072 CDr00r00            150 	call	_SpriteManagerAdd
   0075 E8 05               151 	add	sp, #5
                            152 ;StateEnd2.c:32: SpriteManagerAdd(SPRITE_DIAMOND, 64, 72);
   0077 21 48 00            153 	ld	hl,#0x0048
   007A E5                  154 	push	hl
   007B 2E 40               155 	ld	l, #0x40
   007D E5                  156 	push	hl
   007E 3E 09               157 	ld	a,#0x09
   0080 F5                  158 	push	af
   0081 33                  159 	inc	sp
   0082 CDr00r00            160 	call	_SpriteManagerAdd
   0085 E8 05               161 	add	sp, #5
   0087                     162 00103$:
                            163 ;StateEnd2.c:36: if(have_diamond==6){
   0087 21r00r00            164 	ld	hl,#_have_diamond
   008A 7E                  165 	ld	a,(hl)
   008B D6 06               166 	sub	a, #0x06
   008D C2rD6r00            167 	jp	NZ,00105$
   0090 23                  168 	inc	hl
   0091 7E                  169 	ld	a,(hl)
   0092 B7                  170 	or	a, a
   0093 C2rD6r00            171 	jp	NZ,00105$
                            172 ;StateEnd2.c:37: SpriteManagerAdd(SPRITE_DIAMOND, 80, 72);
   0096 21 48 00            173 	ld	hl,#0x0048
   0099 E5                  174 	push	hl
   009A 2E 50               175 	ld	l, #0x50
   009C E5                  176 	push	hl
   009D 3E 09               177 	ld	a,#0x09
   009F F5                  178 	push	af
   00A0 33                  179 	inc	sp
   00A1 CDr00r00            180 	call	_SpriteManagerAdd
   00A4 E8 05               181 	add	sp, #5
                            182 ;StateEnd2.c:38: SpriteManagerAdd(SPRITE_DIAMOND, 64, 72);
   00A6 21 48 00            183 	ld	hl,#0x0048
   00A9 E5                  184 	push	hl
   00AA 2E 40               185 	ld	l, #0x40
   00AC E5                  186 	push	hl
   00AD 3E 09               187 	ld	a,#0x09
   00AF F5                  188 	push	af
   00B0 33                  189 	inc	sp
   00B1 CDr00r00            190 	call	_SpriteManagerAdd
   00B4 E8 05               191 	add	sp, #5
                            192 ;StateEnd2.c:39: SpriteManagerAdd(SPRITE_DIAMOND, 128, 112);
   00B6 21 70 00            193 	ld	hl,#0x0070
   00B9 E5                  194 	push	hl
   00BA 2E 80               195 	ld	l, #0x80
   00BC E5                  196 	push	hl
   00BD 3E 09               197 	ld	a,#0x09
   00BF F5                  198 	push	af
   00C0 33                  199 	inc	sp
   00C1 CDr00r00            200 	call	_SpriteManagerAdd
   00C4 E8 05               201 	add	sp, #5
                            202 ;StateEnd2.c:40: SpriteManagerAdd(SPRITE_DIAMOND, 16, 112);
   00C6 21 70 00            203 	ld	hl,#0x0070
   00C9 E5                  204 	push	hl
   00CA 2E 10               205 	ld	l, #0x10
   00CC E5                  206 	push	hl
   00CD 3E 09               207 	ld	a,#0x09
   00CF F5                  208 	push	af
   00D0 33                  209 	inc	sp
   00D1 CDr00r00            210 	call	_SpriteManagerAdd
   00D4 E8 05               211 	add	sp, #5
   00D6                     212 00105$:
                            213 ;StateEnd2.c:43: InitScrollTiles(0, 59, tiles, 3);
   00D6 21 00 00            214 	ld	hl,#0x0000
   00D9 E5                  215 	push	hl
   00DA 3E 03               216 	ld	a,#0x03
   00DC F5                  217 	push	af
   00DD 33                  218 	inc	sp
   00DE 21r00r00            219 	ld	hl,#_tiles
   00E1 E5                  220 	push	hl
   00E2 21 00 3B            221 	ld	hl,#0x3b00
   00E5 E5                  222 	push	hl
   00E6 CDr00r00            223 	call	_ZInitScrollTilesColor
   00E9 E8 07               224 	add	sp, #7
                            225 ;StateEnd2.c:44: InitScroll(endWidth,endHeight,end, collilision_tiles4, 0, 3);
   00EB 21 00 00            226 	ld	hl,#0x0000
   00EE E5                  227 	push	hl
   00EF 3E 03               228 	ld	a,#0x03
   00F1 F5                  229 	push	af
   00F2 33                  230 	inc	sp
   00F3 2E 00               231 	ld	l, #0x00
   00F5 E5                  232 	push	hl
   00F6 21r01r00            233 	ld	hl,#_collilision_tiles4
   00F9 E5                  234 	push	hl
   00FA 21r00r00            235 	ld	hl,#_end
   00FD E5                  236 	push	hl
   00FE 21 12 00            237 	ld	hl,#0x0012
   0101 E5                  238 	push	hl
   0102 2E 14               239 	ld	l, #0x14
   0104 E5                  240 	push	hl
   0105 CDr00r00            241 	call	_InitScrollColor
   0108 E8 0D               242 	add	sp, #13
                            243 ;StateEnd2.c:45: SHOW_BKG;
   010A 11 40 FF            244 	ld	de,#0xff40
   010D 1A                  245 	ld	a,(de)
   010E 4F                  246 	ld	c,a
   010F 06 00               247 	ld	b,#0x00
   0111 79                  248 	ld	a,c
   0112 CB C7               249 	set	0, a
   0114 4F                  250 	ld	c,a
   0115 21 40 FF            251 	ld	hl,#0xff40
   0118 71                  252 	ld	(hl),c
   0119 C9                  253 	ret
                            254 ;StateEnd2.c:50: void Update_STATE_END2() {
                            255 ;	---------------------------------
                            256 ; Function Update_STATE_END2
                            257 ; ---------------------------------
   011A                     258 _Update_STATE_END2::
                            259 ;StateEnd2.c:51: if(have_diamond==3 || have_diamond==10){
   011A 21r00r00            260 	ld	hl,#_have_diamond
   011D 7E                  261 	ld	a,(hl)
   011E D6 03               262 	sub	a, #0x03
   0120 20 05               263 	jr	NZ,00110$
   0122 23                  264 	inc	hl
   0123 7E                  265 	ld	a,(hl)
   0124 B7                  266 	or	a, a
   0125 28 0B               267 	jr	Z,00101$
   0127                     268 00110$:
   0127 21r00r00            269 	ld	hl,#_have_diamond
   012A 7E                  270 	ld	a,(hl)
   012B D6 0A               271 	sub	a, #0x0a
   012D C0                  272 	ret	NZ
   012E 23                  273 	inc	hl
   012F 7E                  274 	ld	a,(hl)
   0130 B7                  275 	or	a, a
   0131 C0                  276 	ret	NZ
   0132                     277 00101$:
                            278 ;StateEnd2.c:52: SetState(STATE_MENU);
   0132 AF                  279 	xor	a, a
   0133 F5                  280 	push	af
   0134 33                  281 	inc	sp
   0135 CDr00r00            282 	call	_SetState
   0138 33                  283 	inc	sp
   0139 C9                  284 	ret
                            285 	.area _CODE_2
                            286 	.area _CABS (ABS)
