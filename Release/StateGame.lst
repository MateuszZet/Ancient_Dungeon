                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.0 #9615 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module StateGame
                              6 	.optsdcc -mgbz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _SpriteManagerAdd
                             12 	.globl _SpriteManagerLoad
                             13 	.globl _InitScrollColor
                             14 	.globl _ZInitScrollTilesColor
                             15 	.globl _collilision_tiles
                             16 	.globl _bank_STATE_GAME
                             17 	.globl _Start_STATE_GAME
                             18 	.globl _Update_STATE_GAME
                             19 ;--------------------------------------------------------
                             20 ; ram data
                             21 ;--------------------------------------------------------
                             22 	.area _DATA
   0000                      23 _bank_STATE_GAME::
   0000                      24 	.ds 1
   0001                      25 _collilision_tiles::
   0001                      26 	.ds 5
                             27 ;--------------------------------------------------------
                             28 ; absolute external ram data
                             29 ;--------------------------------------------------------
                             30 	.area _DABS (ABS)
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _HOME
                             35 	.area _GSINIT
                             36 	.area _GSFINAL
                             37 	.area _GSINIT
                             38 ;StateGame.c:3: UINT8 bank_STATE_GAME = 2;
   0000 21r00r00             39 	ld	hl,#_bank_STATE_GAME
   0003 36 02                40 	ld	(hl),#0x02
                             41 ;StateGame.c:15: UINT8 collilision_tiles[] = { 1,2,3,4,0 };
   0005 21r01r00             42 	ld	hl,#_collilision_tiles
   0008 36 01                43 	ld	(hl),#0x01
   000A 21r02r00             44 	ld	hl,#(_collilision_tiles + 0x0001)
   000D 36 02                45 	ld	(hl),#0x02
   000F 21r03r00             46 	ld	hl,#(_collilision_tiles + 0x0002)
   0012 36 03                47 	ld	(hl),#0x03
   0014 21r04r00             48 	ld	hl,#(_collilision_tiles + 0x0003)
   0017 36 04                49 	ld	(hl),#0x04
   0019 21r05r00             50 	ld	hl,#(_collilision_tiles + 0x0004)
   001C 36 00                51 	ld	(hl),#0x00
                             52 ;--------------------------------------------------------
                             53 ; Home
                             54 ;--------------------------------------------------------
                             55 	.area _HOME
                             56 	.area _HOME
                             57 ;--------------------------------------------------------
                             58 ; code
                             59 ;--------------------------------------------------------
                             60 	.area _CODE_2
                             61 ;StateGame.c:17: void Start_STATE_GAME() {
                             62 ;	---------------------------------
                             63 ; Function Start_STATE_GAME
                             64 ; ---------------------------------
   0000                      65 _Start_STATE_GAME::
                             66 ;StateGame.c:19: next_lvl=2;
   0000 21r00r00             67 	ld	hl,#_next_lvl
   0003 36 02                68 	ld	(hl),#0x02
   0005 23                   69 	inc	hl
   0006 36 00                70 	ld	(hl),#0x00
                             71 ;StateGame.c:20: NR52_REG = 0x80; //Enables sound, you should always setup this first
   0008 21 26 FF             72 	ld	hl,#0xff26
   000B 36 80                73 	ld	(hl),#0x80
                             74 ;StateGame.c:21: NR51_REG = 0xFF; //Enables all channels (left and right)
   000D 2E 25                75 	ld	l, #0x25
   000F 36 FF                76 	ld	(hl),#0xff
                             77 ;StateGame.c:22: NR50_REG = 0x77; //Max volume
   0011 2E 24                78 	ld	l, #0x24
   0013 36 77                79 	ld	(hl),#0x77
                             80 ;StateGame.c:24: SPRITES_8x16;
   0015 11 40 FF             81 	ld	de,#0xff40
   0018 1A                   82 	ld	a,(de)
   0019 4F                   83 	ld	c,a
   001A 06 00                84 	ld	b,#0x00
   001C 79                   85 	ld	a,c
   001D CB D7                86 	set	2, a
   001F 4F                   87 	ld	c,a
   0020 2E 40                88 	ld	l, #0x40
   0022 71                   89 	ld	(hl),c
                             90 ;StateGame.c:25: for(i = 0; i != n_sprite_types; ++ i) {
   0023 06 00                91 	ld	b,#0x00
   0025                      92 00103$:
   0025 21r00r00             93 	ld	hl,#_n_sprite_types
   0028 7E                   94 	ld	a,(hl)
   0029 90                   95 	sub	a, b
   002A 28 0B                96 	jr	Z,00101$
                             97 ;StateGame.c:26: SpriteManagerLoad(i);
   002C C5                   98 	push	bc
   002D C5                   99 	push	bc
   002E 33                  100 	inc	sp
   002F CDr00r00            101 	call	_SpriteManagerLoad
   0032 33                  102 	inc	sp
   0033 C1                  103 	pop	bc
                            104 ;StateGame.c:25: for(i = 0; i != n_sprite_types; ++ i) {
   0034 04                  105 	inc	b
   0035 18 EE               106 	jr	00103$
   0037                     107 00101$:
                            108 ;StateGame.c:28: SHOW_SPRITES;
   0037 11 40 FF            109 	ld	de,#0xff40
   003A 1A                  110 	ld	a,(de)
   003B 4F                  111 	ld	c,a
   003C 06 00               112 	ld	b,#0x00
   003E 79                  113 	ld	a,c
   003F CB CF               114 	set	1, a
   0041 4F                  115 	ld	c,a
   0042 21 40 FF            116 	ld	hl,#0xff40
   0045 71                  117 	ld	(hl),c
                            118 ;StateGame.c:30: scroll_target = SpriteManagerAdd(SPRITE_PLAYER, 20, 100);
   0046 21 64 00            119 	ld	hl,#0x0064
   0049 E5                  120 	push	hl
   004A 2E 14               121 	ld	l, #0x14
   004C E5                  122 	push	hl
   004D AF                  123 	xor	a, a
   004E F5                  124 	push	af
   004F 33                  125 	inc	sp
   0050 CDr00r00            126 	call	_SpriteManagerAdd
   0053 E8 05               127 	add	sp, #5
   0055 21r00r00            128 	ld	hl,#_scroll_target
   0058 73                  129 	ld	(hl),e
   0059 23                  130 	inc	hl
   005A 72                  131 	ld	(hl),d
                            132 ;StateGame.c:32: door_x = 240;
   005B 21r00r00            133 	ld	hl,#_door_x
   005E 36 F0               134 	ld	(hl),#0xf0
   0060 23                  135 	inc	hl
   0061 36 00               136 	ld	(hl),#0x00
                            137 ;StateGame.c:33: door_y = 112;
   0063 21r00r00            138 	ld	hl,#_door_y
   0066 36 70               139 	ld	(hl),#0x70
   0068 23                  140 	inc	hl
   0069 36 00               141 	ld	(hl),#0x00
                            142 ;StateGame.c:34: have_bomb = 4;
   006B 21r00r00            143 	ld	hl,#_have_bomb
   006E 36 04               144 	ld	(hl),#0x04
   0070 23                  145 	inc	hl
   0071 36 00               146 	ld	(hl),#0x00
                            147 ;StateGame.c:35: SpriteManagerAdd(SPRITE_KEY, 288, 112);
   0073 21 70 00            148 	ld	hl,#0x0070
   0076 E5                  149 	push	hl
   0077 21 20 01            150 	ld	hl,#0x0120
   007A E5                  151 	push	hl
   007B 3E 03               152 	ld	a,#0x03
   007D F5                  153 	push	af
   007E 33                  154 	inc	sp
   007F CDr00r00            155 	call	_SpriteManagerAdd
   0082 E8 05               156 	add	sp, #5
                            157 ;StateGame.c:36: SpriteManagerAdd(SPRITE_DOOR, door_x, door_y);
   0084 21r00r00            158 	ld	hl,#_door_y
   0087 2A                  159 	ld	a,(hl+)
   0088 66                  160 	ld	h,(hl)
   0089 6F                  161 	ld	l,a
   008A E5                  162 	push	hl
   008B 21r00r00            163 	ld	hl,#_door_x
   008E 2A                  164 	ld	a,(hl+)
   008F 66                  165 	ld	h,(hl)
   0090 6F                  166 	ld	l,a
   0091 E5                  167 	push	hl
   0092 3E 04               168 	ld	a,#0x04
   0094 F5                  169 	push	af
   0095 33                  170 	inc	sp
   0096 CDr00r00            171 	call	_SpriteManagerAdd
   0099 E8 05               172 	add	sp, #5
                            173 ;StateGame.c:38: SpriteManagerAdd(SPRITE_ENEMY, 40, 32);
   009B 21 20 00            174 	ld	hl,#0x0020
   009E E5                  175 	push	hl
   009F 2E 28               176 	ld	l, #0x28
   00A1 E5                  177 	push	hl
   00A2 3E 01               178 	ld	a,#0x01
   00A4 F5                  179 	push	af
   00A5 33                  180 	inc	sp
   00A6 CDr00r00            181 	call	_SpriteManagerAdd
   00A9 E8 05               182 	add	sp, #5
                            183 ;StateGame.c:39: SpriteManagerAdd(SPRITE_ENEMY, 128, 80);
   00AB 21 50 00            184 	ld	hl,#0x0050
   00AE E5                  185 	push	hl
   00AF 2E 80               186 	ld	l, #0x80
   00B1 E5                  187 	push	hl
   00B2 3E 01               188 	ld	a,#0x01
   00B4 F5                  189 	push	af
   00B5 33                  190 	inc	sp
   00B6 CDr00r00            191 	call	_SpriteManagerAdd
   00B9 E8 05               192 	add	sp, #5
                            193 ;StateGame.c:40: SpriteManagerAdd(SPRITE_ENEMY, 200, 112);
   00BB 21 70 00            194 	ld	hl,#0x0070
   00BE E5                  195 	push	hl
   00BF 2E C8               196 	ld	l, #0xc8
   00C1 E5                  197 	push	hl
   00C2 3E 01               198 	ld	a,#0x01
   00C4 F5                  199 	push	af
   00C5 33                  200 	inc	sp
   00C6 CDr00r00            201 	call	_SpriteManagerAdd
   00C9 E8 05               202 	add	sp, #5
                            203 ;StateGame.c:41: SpriteManagerAdd(SPRITE_ENEMY, 288, 96);
   00CB 21 60 00            204 	ld	hl,#0x0060
   00CE E5                  205 	push	hl
   00CF 21 20 01            206 	ld	hl,#0x0120
   00D2 E5                  207 	push	hl
   00D3 3E 01               208 	ld	a,#0x01
   00D5 F5                  209 	push	af
   00D6 33                  210 	inc	sp
   00D7 CDr00r00            211 	call	_SpriteManagerAdd
   00DA E8 05               212 	add	sp, #5
                            213 ;StateGame.c:42: SpriteManagerAdd(SPRITE_ENEMY3, 30, 30);
   00DC 21 1E 00            214 	ld	hl,#0x001e
   00DF E5                  215 	push	hl
   00E0 2E 1E               216 	ld	l, #0x1e
   00E2 E5                  217 	push	hl
   00E3 3E 08               218 	ld	a,#0x08
   00E5 F5                  219 	push	af
   00E6 33                  220 	inc	sp
   00E7 CDr00r00            221 	call	_SpriteManagerAdd
   00EA E8 05               222 	add	sp, #5
                            223 ;StateGame.c:44: InitScrollTiles(0, 59, tiles, 3);
   00EC 21 00 00            224 	ld	hl,#0x0000
   00EF E5                  225 	push	hl
   00F0 3E 03               226 	ld	a,#0x03
   00F2 F5                  227 	push	af
   00F3 33                  228 	inc	sp
   00F4 21r00r00            229 	ld	hl,#_tiles
   00F7 E5                  230 	push	hl
   00F8 21 00 3B            231 	ld	hl,#0x3b00
   00FB E5                  232 	push	hl
   00FC CDr00r00            233 	call	_ZInitScrollTilesColor
   00FF E8 07               234 	add	sp, #7
                            235 ;StateGame.c:45: InitScroll(mapWidth, mapHeight, map, collilision_tiles, 0, 3);
   0101 21 00 00            236 	ld	hl,#0x0000
   0104 E5                  237 	push	hl
   0105 3E 03               238 	ld	a,#0x03
   0107 F5                  239 	push	af
   0108 33                  240 	inc	sp
   0109 2E 00               241 	ld	l, #0x00
   010B E5                  242 	push	hl
   010C 21r01r00            243 	ld	hl,#_collilision_tiles
   010F E5                  244 	push	hl
   0110 21r00r00            245 	ld	hl,#_map
   0113 E5                  246 	push	hl
   0114 21 12 00            247 	ld	hl,#0x0012
   0117 E5                  248 	push	hl
   0118 2E 28               249 	ld	l, #0x28
   011A E5                  250 	push	hl
   011B CDr00r00            251 	call	_InitScrollColor
   011E E8 0D               252 	add	sp, #13
                            253 ;StateGame.c:46: SHOW_BKG;
   0120 11 40 FF            254 	ld	de,#0xff40
   0123 1A                  255 	ld	a,(de)
   0124 4F                  256 	ld	c,a
   0125 06 00               257 	ld	b,#0x00
   0127 79                  258 	ld	a,c
   0128 CB C7               259 	set	0, a
   012A 4F                  260 	ld	c,a
   012B 21 40 FF            261 	ld	hl,#0xff40
   012E 71                  262 	ld	(hl),c
   012F C9                  263 	ret
                            264 ;StateGame.c:51: void Update_STATE_GAME() {
                            265 ;	---------------------------------
                            266 ; Function Update_STATE_GAME
                            267 ; ---------------------------------
   0130                     268 _Update_STATE_GAME::
                            269 ;StateGame.c:55: }
   0130 C9                  270 	ret
                            271 	.area _CODE_2
                            272 	.area _CABS (ABS)
