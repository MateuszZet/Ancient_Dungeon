                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.0 #9615 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module StateEnd
                              6 	.optsdcc -mgbz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _SpriteManagerAdd
                             12 	.globl _SpriteManagerLoad
                             13 	.globl _InitScrollColor
                             14 	.globl _ZInitScrollTilesColor
                             15 	.globl _SetState
                             16 	.globl _collilision_tiles4
                             17 	.globl _bank_STATE_END
                             18 	.globl _Start_STATE_END
                             19 	.globl _Update_STATE_END
                             20 ;--------------------------------------------------------
                             21 ; ram data
                             22 ;--------------------------------------------------------
                             23 	.area _DATA
   0000                      24 _bank_STATE_END::
   0000                      25 	.ds 1
   0001                      26 _collilision_tiles4::
   0001                      27 	.ds 5
                             28 ;--------------------------------------------------------
                             29 ; absolute external ram data
                             30 ;--------------------------------------------------------
                             31 	.area _DABS (ABS)
                             32 ;--------------------------------------------------------
                             33 ; global & static initialisations
                             34 ;--------------------------------------------------------
                             35 	.area _HOME
                             36 	.area _GSINIT
                             37 	.area _GSFINAL
                             38 	.area _GSINIT
                             39 ;StateEnd.c:3: UINT8 bank_STATE_END = 2;
   0000 21r00r00             40 	ld	hl,#_bank_STATE_END
   0003 36 02                41 	ld	(hl),#0x02
                             42 ;StateEnd.c:14: UINT8 collilision_tiles4[] = { 1,2,3,4,0 };
   0005 21r01r00             43 	ld	hl,#_collilision_tiles4
   0008 36 01                44 	ld	(hl),#0x01
   000A 21r02r00             45 	ld	hl,#(_collilision_tiles4 + 0x0001)
   000D 36 02                46 	ld	(hl),#0x02
   000F 21r03r00             47 	ld	hl,#(_collilision_tiles4 + 0x0002)
   0012 36 03                48 	ld	(hl),#0x03
   0014 21r04r00             49 	ld	hl,#(_collilision_tiles4 + 0x0003)
   0017 36 04                50 	ld	(hl),#0x04
   0019 21r05r00             51 	ld	hl,#(_collilision_tiles4 + 0x0004)
   001C 36 00                52 	ld	(hl),#0x00
                             53 ;--------------------------------------------------------
                             54 ; Home
                             55 ;--------------------------------------------------------
                             56 	.area _HOME
                             57 	.area _HOME
                             58 ;--------------------------------------------------------
                             59 ; code
                             60 ;--------------------------------------------------------
                             61 	.area _CODE_2
                             62 ;StateEnd.c:16: void Start_STATE_END() {
                             63 ;	---------------------------------
                             64 ; Function Start_STATE_END
                             65 ; ---------------------------------
   0000                      66 _Start_STATE_END::
                             67 ;StateEnd.c:18: next_lvl =1;
   0000 21r00r00             68 	ld	hl,#_next_lvl
   0003 36 01                69 	ld	(hl),#0x01
   0005 23                   70 	inc	hl
   0006 36 00                71 	ld	(hl),#0x00
                             72 ;StateEnd.c:19: NR52_REG = 0x80; //Enables sound, you should always setup this first
   0008 21 26 FF             73 	ld	hl,#0xff26
   000B 36 80                74 	ld	(hl),#0x80
                             75 ;StateEnd.c:20: NR51_REG = 0xFF; //Enables all channels (left and right)
   000D 2E 25                76 	ld	l, #0x25
   000F 36 FF                77 	ld	(hl),#0xff
                             78 ;StateEnd.c:21: NR50_REG = 0x77; //Max volume
   0011 2E 24                79 	ld	l, #0x24
   0013 36 77                80 	ld	(hl),#0x77
                             81 ;StateEnd.c:23: SPRITES_8x16;
   0015 11 40 FF             82 	ld	de,#0xff40
   0018 1A                   83 	ld	a,(de)
   0019 4F                   84 	ld	c,a
   001A 06 00                85 	ld	b,#0x00
   001C 79                   86 	ld	a,c
   001D CB D7                87 	set	2, a
   001F 4F                   88 	ld	c,a
   0020 2E 40                89 	ld	l, #0x40
   0022 71                   90 	ld	(hl),c
                             91 ;StateEnd.c:24: for(i = 0; i != n_sprite_types; ++ i) {
   0023 06 00                92 	ld	b,#0x00
   0025                      93 00103$:
   0025 21r00r00             94 	ld	hl,#_n_sprite_types
   0028 7E                   95 	ld	a,(hl)
   0029 90                   96 	sub	a, b
   002A 28 0B                97 	jr	Z,00101$
                             98 ;StateEnd.c:25: SpriteManagerLoad(i);
   002C C5                   99 	push	bc
   002D C5                  100 	push	bc
   002E 33                  101 	inc	sp
   002F CDr00r00            102 	call	_SpriteManagerLoad
   0032 33                  103 	inc	sp
   0033 C1                  104 	pop	bc
                            105 ;StateEnd.c:24: for(i = 0; i != n_sprite_types; ++ i) {
   0034 04                  106 	inc	b
   0035 18 EE               107 	jr	00103$
   0037                     108 00101$:
                            109 ;StateEnd.c:27: SHOW_SPRITES;
   0037 11 40 FF            110 	ld	de,#0xff40
   003A 1A                  111 	ld	a,(de)
   003B 4F                  112 	ld	c,a
   003C 06 00               113 	ld	b,#0x00
   003E 79                  114 	ld	a,c
   003F CB CF               115 	set	1, a
   0041 4F                  116 	ld	c,a
   0042 21 40 FF            117 	ld	hl,#0xff40
   0045 71                  118 	ld	(hl),c
                            119 ;StateEnd.c:29: scroll_target = SpriteManagerAdd(SPRITE_PLAYER, 70, 35);
   0046 21 23 00            120 	ld	hl,#0x0023
   0049 E5                  121 	push	hl
   004A 2E 46               122 	ld	l, #0x46
   004C E5                  123 	push	hl
   004D AF                  124 	xor	a, a
   004E F5                  125 	push	af
   004F 33                  126 	inc	sp
   0050 CDr00r00            127 	call	_SpriteManagerAdd
   0053 E8 05               128 	add	sp, #5
   0055 21r00r00            129 	ld	hl,#_scroll_target
   0058 73                  130 	ld	(hl),e
   0059 23                  131 	inc	hl
   005A 72                  132 	ld	(hl),d
                            133 ;StateEnd.c:30: SpriteManagerAdd(SPRITE_DIAMOND, 72, 72);
   005B 21 48 00            134 	ld	hl,#0x0048
   005E E5                  135 	push	hl
   005F 2E 48               136 	ld	l, #0x48
   0061 E5                  137 	push	hl
   0062 3E 09               138 	ld	a,#0x09
   0064 F5                  139 	push	af
   0065 33                  140 	inc	sp
   0066 CDr00r00            141 	call	_SpriteManagerAdd
   0069 E8 05               142 	add	sp, #5
                            143 ;StateEnd.c:31: InitScrollTiles(0, 59, tiles, 3);
   006B 21 00 00            144 	ld	hl,#0x0000
   006E E5                  145 	push	hl
   006F 3E 03               146 	ld	a,#0x03
   0071 F5                  147 	push	af
   0072 33                  148 	inc	sp
   0073 21r00r00            149 	ld	hl,#_tiles
   0076 E5                  150 	push	hl
   0077 21 00 3B            151 	ld	hl,#0x3b00
   007A E5                  152 	push	hl
   007B CDr00r00            153 	call	_ZInitScrollTilesColor
   007E E8 07               154 	add	sp, #7
                            155 ;StateEnd.c:32: InitScroll(endWidth,endHeight,end, collilision_tiles4, 0, 3);
   0080 21 00 00            156 	ld	hl,#0x0000
   0083 E5                  157 	push	hl
   0084 3E 03               158 	ld	a,#0x03
   0086 F5                  159 	push	af
   0087 33                  160 	inc	sp
   0088 2E 00               161 	ld	l, #0x00
   008A E5                  162 	push	hl
   008B 21r01r00            163 	ld	hl,#_collilision_tiles4
   008E E5                  164 	push	hl
   008F 21r00r00            165 	ld	hl,#_end
   0092 E5                  166 	push	hl
   0093 21 12 00            167 	ld	hl,#0x0012
   0096 E5                  168 	push	hl
   0097 2E 14               169 	ld	l, #0x14
   0099 E5                  170 	push	hl
   009A CDr00r00            171 	call	_InitScrollColor
   009D E8 0D               172 	add	sp, #13
                            173 ;StateEnd.c:33: SHOW_BKG;
   009F 11 40 FF            174 	ld	de,#0xff40
   00A2 1A                  175 	ld	a,(de)
   00A3 4F                  176 	ld	c,a
   00A4 06 00               177 	ld	b,#0x00
   00A6 79                  178 	ld	a,c
   00A7 CB C7               179 	set	0, a
   00A9 4F                  180 	ld	c,a
   00AA 21 40 FF            181 	ld	hl,#0xff40
   00AD 71                  182 	ld	(hl),c
   00AE C9                  183 	ret
                            184 ;StateEnd.c:38: void Update_STATE_END() {
                            185 ;	---------------------------------
                            186 ; Function Update_STATE_END
                            187 ; ---------------------------------
   00AF                     188 _Update_STATE_END::
                            189 ;StateEnd.c:40: if(have_diamond==1){
   00AF 21r00r00            190 	ld	hl,#_have_diamond
   00B2 7E                  191 	ld	a,(hl)
   00B3 3D                  192 	dec	a
   00B4 20 0C               193 	jr	NZ,00102$
   00B6 23                  194 	inc	hl
   00B7 7E                  195 	ld	a,(hl)
   00B8 B7                  196 	or	a, a
   00B9 20 07               197 	jr	NZ,00102$
                            198 ;StateEnd.c:41: SetState(STATE_MENU);
   00BB AF                  199 	xor	a, a
   00BC F5                  200 	push	af
   00BD 33                  201 	inc	sp
   00BE CDr00r00            202 	call	_SetState
   00C1 33                  203 	inc	sp
   00C2                     204 00102$:
                            205 ;StateEnd.c:43: if (KEY_PRESSED(J_START)) {
   00C2 21r00r00            206 	ld	hl,#_keys
   00C5 4E                  207 	ld	c,(hl)
   00C6 06 00               208 	ld	b,#0x00
   00C8 CB 79               209 	bit	7, c
   00CA C8                  210 	ret	Z
                            211 ;StateEnd.c:44: SetState(STATE_END2);
   00CB 3E 08               212 	ld	a,#0x08
   00CD F5                  213 	push	af
   00CE 33                  214 	inc	sp
   00CF CDr00r00            215 	call	_SetState
   00D2 33                  216 	inc	sp
   00D3 C9                  217 	ret
                            218 	.area _CODE_2
                            219 	.area _CABS (ABS)
