                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.0 #9615 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module StateEnd
                              6 	.optsdcc -mgbz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _SpriteManagerAdd
                             12 	.globl _SpriteManagerLoad
                             13 	.globl _InitScrollColor
                             14 	.globl _ZInitScrollTilesColor
                             15 	.globl _SetState
                             16 	.globl _collilision_tiles4
                             17 	.globl _bank_STATE_END
                             18 	.globl _Start_STATE_END
                             19 	.globl _Update_STATE_END
                             20 ;--------------------------------------------------------
                             21 ; ram data
                             22 ;--------------------------------------------------------
                             23 	.area _DATA
   0000                      24 _bank_STATE_END::
   0000                      25 	.ds 1
   0001                      26 _collilision_tiles4::
   0001                      27 	.ds 5
                             28 ;--------------------------------------------------------
                             29 ; absolute external ram data
                             30 ;--------------------------------------------------------
                             31 	.area _DABS (ABS)
                             32 ;--------------------------------------------------------
                             33 ; global & static initialisations
                             34 ;--------------------------------------------------------
                             35 	.area _HOME
                             36 	.area _GSINIT
                             37 	.area _GSFINAL
                             38 	.area _GSINIT
                             39 ;StateEnd.c:3: UINT8 bank_STATE_END = 2;
   0000 21r00r00             40 	ld	hl,#_bank_STATE_END
   0003 36 02                41 	ld	(hl),#0x02
                             42 ;StateEnd.c:14: UINT8 collilision_tiles4[] = { 1,2,3,4,0 };
   0005 21r01r00             43 	ld	hl,#_collilision_tiles4
   0008 36 01                44 	ld	(hl),#0x01
   000A 21r02r00             45 	ld	hl,#(_collilision_tiles4 + 0x0001)
   000D 36 02                46 	ld	(hl),#0x02
   000F 21r03r00             47 	ld	hl,#(_collilision_tiles4 + 0x0002)
   0012 36 03                48 	ld	(hl),#0x03
   0014 21r04r00             49 	ld	hl,#(_collilision_tiles4 + 0x0003)
   0017 36 04                50 	ld	(hl),#0x04
   0019 21r05r00             51 	ld	hl,#(_collilision_tiles4 + 0x0004)
   001C 36 00                52 	ld	(hl),#0x00
                             53 ;--------------------------------------------------------
                             54 ; Home
                             55 ;--------------------------------------------------------
                             56 	.area _HOME
                             57 	.area _HOME
                             58 ;--------------------------------------------------------
                             59 ; code
                             60 ;--------------------------------------------------------
                             61 	.area _CODE_2
                             62 ;StateEnd.c:16: void Start_STATE_END() {
                             63 ;	---------------------------------
                             64 ; Function Start_STATE_END
                             65 ; ---------------------------------
   0000                      66 _Start_STATE_END::
                             67 ;StateEnd.c:18: next_lvl =1;
   0000 21r00r00             68 	ld	hl,#_next_lvl
   0003 36 01                69 	ld	(hl),#0x01
   0005 23                   70 	inc	hl
   0006 36 00                71 	ld	(hl),#0x00
                             72 ;StateEnd.c:19: NR52_REG = 0x80; //Enables sound, you should always setup this first
   0008 21 26 FF             73 	ld	hl,#0xff26
   000B 36 80                74 	ld	(hl),#0x80
                             75 ;StateEnd.c:20: NR51_REG = 0xFF; //Enables all channels (left and right)
   000D 2E 25                76 	ld	l, #0x25
   000F 36 FF                77 	ld	(hl),#0xff
                             78 ;StateEnd.c:21: NR50_REG = 0x77; //Max volume
   0011 2E 24                79 	ld	l, #0x24
   0013 36 77                80 	ld	(hl),#0x77
                             81 ;StateEnd.c:23: SPRITES_8x16;
   0015 11 40 FF             82 	ld	de,#0xff40
   0018 1A                   83 	ld	a,(de)
   0019 4F                   84 	ld	c,a
   001A 06 00                85 	ld	b,#0x00
   001C 79                   86 	ld	a,c
   001D CB D7                87 	set	2, a
   001F 4F                   88 	ld	c,a
   0020 2E 40                89 	ld	l, #0x40
   0022 71                   90 	ld	(hl),c
                             91 ;StateEnd.c:24: for(i = 0; i != n_sprite_types; ++ i) {
   0023 06 00                92 	ld	b,#0x00
   0025                      93 00107$:
   0025 21r00r00             94 	ld	hl,#_n_sprite_types
   0028 7E                   95 	ld	a,(hl)
   0029 90                   96 	sub	a, b
   002A 28 0B                97 	jr	Z,00101$
                             98 ;StateEnd.c:25: SpriteManagerLoad(i);
   002C C5                   99 	push	bc
   002D C5                  100 	push	bc
   002E 33                  101 	inc	sp
   002F CDr00r00            102 	call	_SpriteManagerLoad
   0032 33                  103 	inc	sp
   0033 C1                  104 	pop	bc
                            105 ;StateEnd.c:24: for(i = 0; i != n_sprite_types; ++ i) {
   0034 04                  106 	inc	b
   0035 18 EE               107 	jr	00107$
   0037                     108 00101$:
                            109 ;StateEnd.c:27: SHOW_SPRITES;
   0037 11 40 FF            110 	ld	de,#0xff40
   003A 1A                  111 	ld	a,(de)
   003B 4F                  112 	ld	c,a
   003C 06 00               113 	ld	b,#0x00
   003E 79                  114 	ld	a,c
   003F CB CF               115 	set	1, a
   0041 4F                  116 	ld	c,a
   0042 21 40 FF            117 	ld	hl,#0xff40
   0045 71                  118 	ld	(hl),c
                            119 ;StateEnd.c:29: scroll_target = SpriteManagerAdd(SPRITE_PLAYER, 70, 35);
   0046 21 23 00            120 	ld	hl,#0x0023
   0049 E5                  121 	push	hl
   004A 2E 46               122 	ld	l, #0x46
   004C E5                  123 	push	hl
   004D AF                  124 	xor	a, a
   004E F5                  125 	push	af
   004F 33                  126 	inc	sp
   0050 CDr00r00            127 	call	_SpriteManagerAdd
   0053 E8 05               128 	add	sp, #5
   0055 21r00r00            129 	ld	hl,#_scroll_target
   0058 73                  130 	ld	(hl),e
   0059 23                  131 	inc	hl
   005A 72                  132 	ld	(hl),d
                            133 ;StateEnd.c:31: if(have_diamond==0){
   005B 21r01r00            134 	ld	hl,#_have_diamond + 1
   005E 3A                  135 	ld	a,(hl-)
   005F B6                  136 	or	a,(hl)
   0060 20 10               137 	jr	NZ,00103$
                            138 ;StateEnd.c:32: SpriteManagerAdd(SPRITE_DIAMOND, 72, 72);
   0062 21 48 00            139 	ld	hl,#0x0048
   0065 E5                  140 	push	hl
   0066 2E 48               141 	ld	l, #0x48
   0068 E5                  142 	push	hl
   0069 3E 09               143 	ld	a,#0x09
   006B F5                  144 	push	af
   006C 33                  145 	inc	sp
   006D CDr00r00            146 	call	_SpriteManagerAdd
   0070 E8 05               147 	add	sp, #5
   0072                     148 00103$:
                            149 ;StateEnd.c:35: if(have_diamond==5){
   0072 21r00r00            150 	ld	hl,#_have_diamond
   0075 7E                  151 	ld	a,(hl)
   0076 D6 05               152 	sub	a, #0x05
   0078 C2r01r01            153 	jp	NZ,00105$
   007B 23                  154 	inc	hl
   007C 7E                  155 	ld	a,(hl)
   007D B7                  156 	or	a, a
   007E C2r01r01            157 	jp	NZ,00105$
                            158 ;StateEnd.c:36: SpriteManagerAdd(SPRITE_DIAMOND, 80, 72);
   0081 21 48 00            159 	ld	hl,#0x0048
   0084 E5                  160 	push	hl
   0085 2E 50               161 	ld	l, #0x50
   0087 E5                  162 	push	hl
   0088 3E 09               163 	ld	a,#0x09
   008A F5                  164 	push	af
   008B 33                  165 	inc	sp
   008C CDr00r00            166 	call	_SpriteManagerAdd
   008F E8 05               167 	add	sp, #5
                            168 ;StateEnd.c:37: SpriteManagerAdd(SPRITE_DIAMOND, 64, 72);
   0091 21 48 00            169 	ld	hl,#0x0048
   0094 E5                  170 	push	hl
   0095 2E 40               171 	ld	l, #0x40
   0097 E5                  172 	push	hl
   0098 3E 09               173 	ld	a,#0x09
   009A F5                  174 	push	af
   009B 33                  175 	inc	sp
   009C CDr00r00            176 	call	_SpriteManagerAdd
   009F E8 05               177 	add	sp, #5
                            178 ;StateEnd.c:39: SpriteManagerAdd(SPRITE_DIAMOND, 128, 112);
   00A1 21 70 00            179 	ld	hl,#0x0070
   00A4 E5                  180 	push	hl
   00A5 2E 80               181 	ld	l, #0x80
   00A7 E5                  182 	push	hl
   00A8 3E 09               183 	ld	a,#0x09
   00AA F5                  184 	push	af
   00AB 33                  185 	inc	sp
   00AC CDr00r00            186 	call	_SpriteManagerAdd
   00AF E8 05               187 	add	sp, #5
                            188 ;StateEnd.c:40: SpriteManagerAdd(SPRITE_DIAMOND, 112, 96);
   00B1 21 60 00            189 	ld	hl,#0x0060
   00B4 E5                  190 	push	hl
   00B5 2E 70               191 	ld	l, #0x70
   00B7 E5                  192 	push	hl
   00B8 3E 09               193 	ld	a,#0x09
   00BA F5                  194 	push	af
   00BB 33                  195 	inc	sp
   00BC CDr00r00            196 	call	_SpriteManagerAdd
   00BF E8 05               197 	add	sp, #5
                            198 ;StateEnd.c:41: SpriteManagerAdd(SPRITE_DIAMOND, 96, 80);
   00C1 21 50 00            199 	ld	hl,#0x0050
   00C4 E5                  200 	push	hl
   00C5 2E 60               201 	ld	l, #0x60
   00C7 E5                  202 	push	hl
   00C8 3E 09               203 	ld	a,#0x09
   00CA F5                  204 	push	af
   00CB 33                  205 	inc	sp
   00CC CDr00r00            206 	call	_SpriteManagerAdd
   00CF E8 05               207 	add	sp, #5
                            208 ;StateEnd.c:43: SpriteManagerAdd(SPRITE_DIAMOND, 16, 112);
   00D1 21 70 00            209 	ld	hl,#0x0070
   00D4 E5                  210 	push	hl
   00D5 2E 10               211 	ld	l, #0x10
   00D7 E5                  212 	push	hl
   00D8 3E 09               213 	ld	a,#0x09
   00DA F5                  214 	push	af
   00DB 33                  215 	inc	sp
   00DC CDr00r00            216 	call	_SpriteManagerAdd
   00DF E8 05               217 	add	sp, #5
                            218 ;StateEnd.c:44: SpriteManagerAdd(SPRITE_DIAMOND, 32, 96);
   00E1 21 60 00            219 	ld	hl,#0x0060
   00E4 E5                  220 	push	hl
   00E5 2E 20               221 	ld	l, #0x20
   00E7 E5                  222 	push	hl
   00E8 3E 09               223 	ld	a,#0x09
   00EA F5                  224 	push	af
   00EB 33                  225 	inc	sp
   00EC CDr00r00            226 	call	_SpriteManagerAdd
   00EF E8 05               227 	add	sp, #5
                            228 ;StateEnd.c:45: SpriteManagerAdd(SPRITE_DIAMOND, 48, 80);
   00F1 21 50 00            229 	ld	hl,#0x0050
   00F4 E5                  230 	push	hl
   00F5 2E 30               231 	ld	l, #0x30
   00F7 E5                  232 	push	hl
   00F8 3E 09               233 	ld	a,#0x09
   00FA F5                  234 	push	af
   00FB 33                  235 	inc	sp
   00FC CDr00r00            236 	call	_SpriteManagerAdd
   00FF E8 05               237 	add	sp, #5
   0101                     238 00105$:
                            239 ;StateEnd.c:48: InitScrollTiles(0, 59, tiles, 3);
   0101 21 00 00            240 	ld	hl,#0x0000
   0104 E5                  241 	push	hl
   0105 3E 03               242 	ld	a,#0x03
   0107 F5                  243 	push	af
   0108 33                  244 	inc	sp
   0109 21r00r00            245 	ld	hl,#_tiles
   010C E5                  246 	push	hl
   010D 21 00 3B            247 	ld	hl,#0x3b00
   0110 E5                  248 	push	hl
   0111 CDr00r00            249 	call	_ZInitScrollTilesColor
   0114 E8 07               250 	add	sp, #7
                            251 ;StateEnd.c:49: InitScroll(endWidth,endHeight,end, collilision_tiles4, 0, 3);
   0116 21 00 00            252 	ld	hl,#0x0000
   0119 E5                  253 	push	hl
   011A 3E 03               254 	ld	a,#0x03
   011C F5                  255 	push	af
   011D 33                  256 	inc	sp
   011E 2E 00               257 	ld	l, #0x00
   0120 E5                  258 	push	hl
   0121 21r01r00            259 	ld	hl,#_collilision_tiles4
   0124 E5                  260 	push	hl
   0125 21r00r00            261 	ld	hl,#_end
   0128 E5                  262 	push	hl
   0129 21 12 00            263 	ld	hl,#0x0012
   012C E5                  264 	push	hl
   012D 2E 14               265 	ld	l, #0x14
   012F E5                  266 	push	hl
   0130 CDr00r00            267 	call	_InitScrollColor
   0133 E8 0D               268 	add	sp, #13
                            269 ;StateEnd.c:50: SHOW_BKG;
   0135 11 40 FF            270 	ld	de,#0xff40
   0138 1A                  271 	ld	a,(de)
   0139 4F                  272 	ld	c,a
   013A 06 00               273 	ld	b,#0x00
   013C 79                  274 	ld	a,c
   013D CB C7               275 	set	0, a
   013F 4F                  276 	ld	c,a
   0140 21 40 FF            277 	ld	hl,#0xff40
   0143 71                  278 	ld	(hl),c
   0144 C9                  279 	ret
                            280 ;StateEnd.c:55: void Update_STATE_END() {
                            281 ;	---------------------------------
                            282 ; Function Update_STATE_END
                            283 ; ---------------------------------
   0145                     284 _Update_STATE_END::
                            285 ;StateEnd.c:57: if(have_diamond==1 || have_diamond==13){
   0145 21r00r00            286 	ld	hl,#_have_diamond
   0148 7E                  287 	ld	a,(hl)
   0149 3D                  288 	dec	a
   014A 20 05               289 	jr	NZ,00110$
   014C 23                  290 	inc	hl
   014D 7E                  291 	ld	a,(hl)
   014E B7                  292 	or	a, a
   014F 28 0B               293 	jr	Z,00101$
   0151                     294 00110$:
   0151 21r00r00            295 	ld	hl,#_have_diamond
   0154 7E                  296 	ld	a,(hl)
   0155 D6 0D               297 	sub	a, #0x0d
   0157 C0                  298 	ret	NZ
   0158 23                  299 	inc	hl
   0159 7E                  300 	ld	a,(hl)
   015A B7                  301 	or	a, a
   015B C0                  302 	ret	NZ
   015C                     303 00101$:
                            304 ;StateEnd.c:58: SetState(STATE_MENU);
   015C AF                  305 	xor	a, a
   015D F5                  306 	push	af
   015E 33                  307 	inc	sp
   015F CDr00r00            308 	call	_SetState
   0162 33                  309 	inc	sp
   0163 C9                  310 	ret
                            311 	.area _CODE_2
                            312 	.area _CABS (ABS)
